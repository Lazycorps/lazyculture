datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    directUrl         = env("DIRECT_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model User {
    id                     String                   @id
    name                   String
    slug                   String
    createDate             DateTime                 @default(now())
    updateDate             DateTime                 @default(now())
    admin                  Boolean                  @default(false)
    Response               QuestionResponse[]
    UserProgress           UserProgress?
    Reporting              QuestionReporting[]
    QuestionSeriesResponse QuestionSeriesResponse[]
    UserAchievement        UserAchievement[]
}

model UserProgress {
    userId     String   @id
    user       User     @relation(fields: [userId], references: [id])
    xp         Int
    levelId    Int
    level      Level    @relation(fields: [levelId], references: [id])
    createDate DateTime @default(now())
    updateDate DateTime @default(now())
}

model Level {
    id           Int            @id
    name         String
    xp_threshold Int
    createDate   DateTime       @default(now())
    updateDate   DateTime       @default(now())
    UserProgress UserProgress[]
}

model Question {
    id         Int                 @id @default(autoincrement())
    difficulty Int
    data       Json?
    picture    String              @default("")
    source     String
    language   String
    xp_earned  Int                 @default(10)
    createDate DateTime            @default(now())
    updateDate DateTime            @default(now())
    userCreate String
    userUpdate String
    deleted    Boolean             @default(false)
    Response   QuestionResponse[]
    Reporting  QuestionReporting[] @relation("QuestionToReporting")
}

model QuestionResponse {
    id         Int      @id @default(autoincrement())
    userId     String
    user       User     @relation(fields: [userId], references: [id])
    questionId Int
    question   Question @relation(fields: [questionId], references: [id])
    success    Boolean
    date       DateTime @default(now())
}

model QuestionTheme {
    id         Int      @id @default(autoincrement())
    name       String
    slug       String
    picture    String   @default("")
    createDate DateTime @default(now())
    updateDate DateTime @default(now())
    userCreate String
    userUpdate String
}

model QuestionReporting {
    id          Int      @id @default(autoincrement())
    userId      String
    user        User     @relation(fields: [userId], references: [id])
    questionId  Int
    question    Question @relation("QuestionToReporting", fields: [questionId], references: [id])
    commentaire String
    date        DateTime @default(now())
    closed      Boolean
}

model QuestionSeries {
    id                     Int                      @id @default(autoincrement())
    type                   String
    difficulty             Int
    title                  String
    data                   Json?
    date                   DateTime                 @db.Date
    createDate             DateTime                 @default(now())
    updateDate             DateTime                 @default(now())
    userCreate             String
    userUpdate             String
    QuestionSeriesResponse QuestionSeriesResponse[]
}

model QuestionSeriesResponse {
    id         Int            @id @default(autoincrement())
    seriesId   Int
    series     QuestionSeries @relation(fields: [seriesId], references: [id])
    userId     String
    user       User           @relation(fields: [userId], references: [id])
    seriesType String         @default("")
    result     Decimal        @default(0)
    data       Json?
    createDate DateTime       @default(now())
    updateDate DateTime       @default(now())
}

model Achievement {
    id             Int               @id @default(autoincrement())
    title          String
    description    String
    createdAt      DateTime          @default(now())
    conditionType  String
    conditionValue Int
    xpEarned       Int
    icon           String            @default("")
    hidden         Boolean           @default(false)
    users          UserAchievement[]
}

model UserAchievement {
    id            Int         @id @default(autoincrement())
    userId        String
    user          User        @relation(fields: [userId], references: [id])
    achievementId Int
    achievement   Achievement @relation(fields: [achievementId], references: [id])
    unlockedAt    DateTime    @default(now())

    @@unique([userId, achievementId])
}
